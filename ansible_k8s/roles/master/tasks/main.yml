---

- name: copy init file
  template: src={{role_path}}/templates/chrony_server.conf dest=/etc/chrony.conf mode=755

- name: create /etc/kubernetes/pki
  file: path=/etc/kubernetes/pki state=directory mode=755

- name: create directory for save yaml file
  file: path=/var/lib/yaml state=directory mode=755

- name: copy k8s init file
  template: src={{role_path}}/templates/k8s-init.yaml dest=/var/lib/yaml mode=755

- name: copy key
  copy: src={{credential_private_key}}/{{item}} dest=/etc/kubernetes/pki
  with_items:
    - "etcd"
    - "ca.crt"
    - "ca.key"
  when: credential_private_key is defined and credential_private_key is not none

- name: systemctl start kubelet && systemctl start kubelet
  shell: systemctl start kubelet && systemctl enable kubelet

- name: start chronyd
  service: name=chronyd state=restarted
  when: ansible_os_family == "RedHat"
- name: start ntpd
  service: name=ntpd state=restarted
  when: ansible_os_family == "RedHat"

- name: kubeadm init --config k8s-init.yaml
  shell: kubeadm init --config /var/lib/yaml/k8s-init.yaml
  when: groups.masters|length == 1

- name: kubeadm init --config k8s-init-multimaster.yaml --upload-certs
  shell: kubeadm init --config /var/lib/yaml/k8s-init-multimaster.yaml --upload-certs
  when: ansible_default_ipv4.address == (master_ip_address) and  groups.masters|length > 1


- name: copy kubeletes.sh
  copy: src={{role_path}}/files/kubeletes.sh dest=/root mode=755

- name: /root/kubeletes.sh
  shell: /root/kubeletes.sh
  when: ansible_default_ipv4.address == (master_ip_address)

- name: copy kube-flannel.yml
  template: src={{role_path}}/templates/kube-flannel.yml dest=/var/lib/yaml mode=755
  when: (k8s_network)=='flannel'

- name: kubeadm token create --print-join-command 
  shell: kubeadm token create --print-join-command > /tmp/t.sh
  when: ansible_default_ipv4.address == (master_ip_address)

- name: copy image to localion
  fetch: src=/tmp/t.sh dest=/tmp/ mode=755
  when: ansible_default_ipv4.address == (master_ip_address)

- name: kubectl create namespace library
  shell: kubectl create namespace library
  ignore_errors: yes
  when: ansible_default_ipv4.address == (master_ip_address)
  

- name: kubeadm init phase upload-certs --upload-certs > join-k8s-master-certificate-key.txt
  shell: kubeadm init phase upload-certs --upload-certs > /tmp/join-k8s-master-certificate-key.txt
  when: ansible_default_ipv4.address == (master_ip_address) and  groups.masters|length > 1

- name: kubeadm init phase upload-certs --upload-certs > join-k8s-master-certificate-key.txt
  fetch: src=/tmp/join-k8s-master-certificate-key.txt dest=/tmp
  when: ansible_default_ipv4.address == (master_ip_address) and  groups.masters|length > 1

- name: kubeadm join
  shell: echo `kubeadm token create --print-join-command` --control-plane --certificate-key `tail -n 1 /tmp/join-k8s-master-certificate-key.txt` --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests > /tmp/join.sh
  when: ansible_default_ipv4.address == (master_ip_address) and  groups.masters|length > 1

- name: copy join.sh file for join the master
  fetch: src=/tmp/join.sh dest=/tmp
  when: ansible_default_ipv4.address == (master_ip_address) and  groups.masters|length > 1


- name: copy master join.sh image to localion
  copy: src=/tmp/{{master_ip_address}}/tmp/join.sh dest=/tmp/ mode=755
  when: ansible_default_ipv4.address!=(master_ip_address) and  groups.masters|length > 1

- name: join the other masters
  shell: /tmp/join.sh
  when: ansible_default_ipv4.address != (master_ip_address) and  groups.masters|length > 1

- name: run kubectl apply -f /var/lib/yaml/kube-flannel.yml
  shell: kubectl apply -f /var/lib/yaml/kube-flannel.yml
  when: ansible_default_ipv4.address == (master_ip_address) and (k8s_network)=='flannel'

- block: 
  - name: get cidr 
    shell: grep -nr cluster-cidr /etc/kubernetes/manifests/kube-controller-manager.yaml|cut -d '=' -f 2-3
    register: cidrs
  - name: set cidr
    set_fact: cidr={{ cidrs.stdout }}
    when: ansible_default_ipv4.address == (master_ip_address) and (k8s_network)=='calico'
  - name: copy calico.yml
    template: src={{role_path}}/templates/calico.yaml dest=/var/lib/yaml mode=755
  - name: run kubectl apply -f /var/lib/yaml/calico.yaml
    shell: kubectl apply -f /var/lib/yaml/calico.yaml
  when: ansible_default_ipv4.address == (master_ip_address) and (k8s_network)=='calico'

- name: /root/kubeletes.sh
  shell: /root/kubeletes.sh
  when: ansible_default_ipv4.address != (master_ip_address) and  groups.masters|length > 1 
